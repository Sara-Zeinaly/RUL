# -*- coding: utf-8 -*-
"""
Created on Fri Jul 28 15:08:11 2023

@author: West
"""

# W9
cycle_0 = f'INR21700_M50T_T23_Aging_0_05C_W9_Channel_5 (1).xlsx'
df_0 = pd.read_excel(cycle_0, sheet_name='Channel_5_1', usecols=['Test_Time(s)', 'Voltage(V)', 'Discharge_Capacity(Ah)', 'Step_Index', 'Aux_Temperature(¡æ)_1'])

for i in tqdm(range(len(df_0))):
    if df_0.loc[i,'Step_Index'] == 1 and df_0.loc[i+1,'Step_Index'] == 2:
        Start_CC_Charge_Time_1_cycle_0 = df_0.loc[i+1,'Test_Time(s)']
    if df_0.loc[i,'Step_Index'] == 2 and df_0.loc[i+1,'Step_Index'] == 3:
        End_CC_Charge_Time_1_cycle_0 = df_0.loc[i,'Test_Time(s)']
        CC_Charge_Time_1_cycle_0 = End_CC_Charge_Time_1_cycle_0 - Start_CC_Charge_Time_1_cycle_0
        Start_CV_Charge_Time_1_cycle_0 = df_0.loc[i+1,'Test_Time(s)']
    if df_0.loc[i,'Step_Index'] == 3 and df_0.loc[i+1,'Step_Index'] == 4:
        End_CV_Charge_Time_1_cycle_0 = df_0.loc[i,'Test_Time(s)']
        CV_Charge_Time_1_cycle_0 = End_CV_Charge_Time_1_cycle_0 - Start_CV_Charge_Time_1_cycle_0
    if df_0.loc[i,'Step_Index'] == 4 and df_0.loc[i+1,'Step_Index'] == 5:
        Start_CC_Discharge_Time_cycle_0 = df_0.loc[i+1,'Test_Time(s)']
    if df_0.loc[i,'Step_Index'] == 5 and df_0.loc[i+1,'Step_Index'] == 6:
        End_CC_Discharge_Time_cycle_0 = df_0.loc[i,'Test_Time(s)']
        CC_Discharge_Time_cycle_0 = End_CC_Discharge_Time_cycle_0 - Start_CC_Discharge_Time_cycle_0

cycle_122 = f'INR21700_M50T_T23_Aging_0_05C_W9_Channel_5 (4).xlsx'
df_122 = pd.read_excel(cycle_122, sheet_name='Channel_5_1', usecols=['Test_Time(s)', 'Voltage(V)', 'Discharge_Capacity(Ah)', 'Step_Index','Aux_Temperature(¡æ)_1'])

for i in tqdm(range(len(df_122))):
    if df_122.loc[i,'Step_Index'] == 1 and df_122.loc[i+1,'Step_Index'] == 2:
        Start_CC_Charge_Time_1_cycle_122 = df_122.loc[i+1,'Test_Time(s)']
    if df_122.loc[i,'Step_Index'] == 2 and df_122.loc[i+1,'Step_Index'] == 3:
        End_CC_Charge_Time_1_cycle_122 = df_122.loc[i,'Test_Time(s)']
        CC_Charge_Time_1_cycle_122 = End_CC_Charge_Time_1_cycle_122 - Start_CC_Charge_Time_1_cycle_122
        Start_CV_Charge_Time_1_cycle_122 = df_122.loc[i+1,'Test_Time(s)']
    if df_122.loc[i,'Step_Index'] == 3 and df_122.loc[i+1,'Step_Index'] == 4:
        End_CV_Charge_Time_1_cycle_122 = df_122.loc[i,'Test_Time(s)']
        CV_Charge_Time_1_cycle_122 = End_CV_Charge_Time_1_cycle_122 - Start_CV_Charge_Time_1_cycle_122
    if df_122.loc[i,'Step_Index'] == 4 and df_122.loc[i+1,'Step_Index'] == 5:
        Start_CC_Discharge_Time_cycle_122 = df_122.loc[i+1,'Test_Time(s)']
    if df_122.loc[i,'Step_Index'] == 5 and df_122.loc[i+1,'Step_Index'] == 6:
        End_CC_Discharge_Time_cycle_122 = df_122.loc[i,'Test_Time(s)']
        CC_Discharge_Time_cycle_122 = End_CC_Discharge_Time_cycle_122 - Start_CC_Discharge_Time_cycle_122
     
F1 = (CC_Charge_Time_1_cycle_122) - (CC_Charge_Time_1_cycle_0)
F2 = (CV_Charge_Time_1_cycle_122) - (CV_Charge_Time_1_cycle_0)
F3 = F1 + F2
F4 = F3/2
F5 = (CC_Discharge_Time_cycle_122) - (CC_Discharge_Time_cycle_0)

df_1 = df_0
df_4 = df_122

# for voltage range 2.5-3.4 V the difference in these measured capacity values at each voltage point is calculated
discharge_capacity_list = []
Voltage_list = []
for i in range(len(df_1)):
    if df_1.loc[i,'Step_Index'] == 5 and df_1.loc[i,'Voltage(V)'] < 3.4:
        Voltage_list.append({'Voltage': df_1.loc[i,'Voltage(V)']})
        discharge_capacity_list.append({'Discharge_Capacity': df_1.loc[i,'Discharge_Capacity(Ah)']})

Discharge_Capacity_a = pd.DataFrame(discharge_capacity_list)
Voltage_a = pd.DataFrame(Voltage_list)

discharge_capacity_list = []
Voltage_list = []
for i in range(len(df_4)):
    if df_4.loc[i,'Step_Index'] == 5 and df_4.loc[i,'Voltage(V)'] <3.4:
        Voltage_list.append({'Voltage': df_4.loc[i,'Voltage(V)']})
        discharge_capacity_list.append({'Discharge_Capacity':  df_4.loc[i,'Discharge_Capacity(Ah)']})

Discharge_Capacity_b = pd.DataFrame(discharge_capacity_list)
Voltage_b = pd.DataFrame(Voltage_list)

from scipy.interpolate import interp1d
import numpy as np
from scipy.stats import skew, kurtosis

fa = interp1d(Voltage_a['Voltage'], Discharge_Capacity_a['Discharge_Capacity'], bounds_error=False)
fb = interp1d(Voltage_b['Voltage'], Discharge_Capacity_b['Discharge_Capacity'], bounds_error=False)
Voltage_interpolated = np.arange(3.40, 2.50, -0.0001)
Discharge_Capacity_interpolated_a = fa(Voltage_interpolated)
Discharge_Capacity_interpolated_b = fb(Voltage_interpolated)

Discharge_Capacity_ab = Discharge_Capacity_interpolated_b - Discharge_Capacity_interpolated_a

Discharge_Capacity_ab = Discharge_Capacity_ab[~np.isnan(Discharge_Capacity_ab)]

F6 = np.var(Discharge_Capacity_ab)
F7 = np.min(Discharge_Capacity_ab)
F8 = np.mean(Discharge_Capacity_ab)
F9 = np.max(Discharge_Capacity_ab)
F10 = skew(Discharge_Capacity_ab)
F11 = kurtosis(Discharge_Capacity_ab)

df_D_1_sampleV = []
df_D_1_sampleDC =[]
for i in range(len(df_1)):
    if df_1.loc[i,'Step_Index'] == 5:
        df_D_1_sampleV = np.append(df_D_1_sampleV, df_1.loc[i,'Voltage(V)'])
        df_D_1_sampleDC = np.append(df_D_1_sampleDC, df_1.loc[i,'Discharge_Capacity(Ah)'])

df_D_1 = pd.DataFrame({'Voltage' : df_D_1_sampleV , 'Discharge_Capacity' : df_D_1_sampleDC})
        
df_D_4_sampleV = []
df_D_4_sampleDC =[]
for i in range(len(df_4)):
    if df_4.loc[i,'Step_Index'] == 5:
        df_D_4_sampleV = np.append(df_D_4_sampleV, df_4.loc[i,'Voltage(V)'])
        df_D_4_sampleDC = np.append(df_D_4_sampleDC, df_4.loc[i,'Discharge_Capacity(Ah)'])

df_D_4 = pd.DataFrame({'Voltage' : df_D_4_sampleV , 'Discharge_Capacity' : df_D_4_sampleDC})

#IC for Batch#1
    
df_smooth = pd.DataFrame(df_D_1)
while trend(df_smooth):
    df_smooth['Voltage'] = smooth(df_smooth)
    
df_smooth = df_smooth.dropna()

f = interp1d(df_smooth['Voltage'], df_smooth['Discharge_Capacity'], bounds_error=False)
Voltage_interpolated = np.arange(4.17, 2.50, -0.0001)
Discharge_Capacity_interpolated_1 = f(Voltage_interpolated)

incremental_capacity = []
for i in tqdm(range(1, len(Voltage_interpolated)-1)):
    diff = Voltage_interpolated[i] - Voltage_interpolated[i-1] 
    ic = (Discharge_Capacity_interpolated_1[i] - Discharge_Capacity_interpolated_1[i-1]) / diff    
    incremental_capacity = np.append(incremental_capacity, ic)

first_peak_1_IC, i = findFirstPeak(incremental_capacity)
first_peak_1_Voltage = incremental_capacity[i]

#IC for Batch#4
df_smooth = pd.DataFrame(df_D_4)
while trend(df_smooth):
    df_smooth['Voltage'] = smooth(df_smooth)

df_smooth = df_smooth.dropna()

f = interp1d(df_smooth['Voltage'], df_smooth['Discharge_Capacity'], bounds_error=False)
Discharge_Capacity_interpolated_4 = f(Voltage_interpolated)

incremental_capacity = []
for i in tqdm(range(1, len(Voltage_interpolated)-1)):
    diff = Voltage_interpolated[i] - Voltage_interpolated[i-1] 
    ic = (Discharge_Capacity_interpolated_4[i] - Discharge_Capacity_interpolated_4[i-1]) / diff    
    incremental_capacity = np.append(incremental_capacity, ic)
    
first_peak_4_IC , i = findFirstPeak(incremental_capacity)
first_peak_4_Voltage = incremental_capacity[i]

F12 = first_peak_4_IC - first_peak_1_IC
F13 = first_peak_4_Voltage - first_peak_1_Voltage

Discharge_Q = []
for i in tqdm(range(1,5)):
        Diags_Data = f'INR21700_M50T_T23_Aging_0_05C_W9_Channel_5 ({i}).xlsx'
        df = pd.read_excel(Diags_Data, sheet_name='Channel_5_1', usecols=['Discharge_Capacity(Ah)'])
        Discharge_Q = np.append(Discharge_Q, df.iloc[-1, 0])

Discharge_Q = pd.DataFrame(Discharge_Q, columns=['Capacity'])
Batch = [0,25,75,122]

#a linear model
import numpy as np

p1, p2 = np.polyfit(Batch, Discharge_Q['Capacity'], 1)

#a square-root of time model
from scipy.optimize import curve_fit
def sqrt_time_model(x, p3, p4):
    return p3*np.sqrt(x) + p4

Cl = Discharge_Q['Capacity'].values
l = np.array(Batch)

popt, pcov = curve_fit(sqrt_time_model, l, Cl)

p3 = popt[0]
p4 = popt[1]

plt.plot(l, sqrt_time_model(l, p3, p4), 'r')
plt.show()



# CE model
def ce_model(x, p5, p6, p7):
    return p5 * (p6 ** x) + p7

Cl = Discharge_Q['Capacity'].values
l = np.array(Batch)

popt, pcov = curve_fit(ce_model, l, Cl)

p5 = popt[0]
p6 = popt[1]
p7 = popt[2]

plt.plot(l, ce_model(l, p5, p6, p7), 'r')
plt.show()

F14 = p1
F15 = p2
F16 = p3
F17 = p4
F18 = p5
F19 = p6
F20 = p7
# Optimal parameters not found: Number of calls to function has reached maxfev = 800.
F21 = Discharge_Q.loc[3]
F22 = Discharge_Q.max() - Discharge_Q.loc[3]



first_peak_1,i_1 = findFirstPeak(df_1['Aux_Temperature(¡æ)_1'])
last_peak_1,i_2 = findLastPeak(df_1['Aux_Temperature(¡æ)_1'])

first_peak_4,i_3= findFirstPeak(df_4['Aux_Temperature(¡æ)_1'])
last_peak_4,i_4 = findLastPeak(df_4['Aux_Temperature(¡æ)_1'])

F23 = first_peak_4 - first_peak_1
F24 = df_4['Test_Time(s)'][i_1] - df_1['Test_Time(s)'][i_3]
F25 = last_peak_4 - last_peak_1
F26 = df_4['Test_Time(s)'][i_4] - df_1['Test_Time(s)'][i_2]

from scipy.integrate import trapz
integral_1 = trapz(df_1['Aux_Temperature(¡æ)_1'], x=df_1['Test_Time(s)'])
integral_4 = trapz(df_4['Aux_Temperature(¡æ)_1'], x=df_4['Test_Time(s)'])

F27 = integral_4 - integral_1
F28 = df_4['Aux_Temperature(¡æ)_1'].min() - df_1['Aux_Temperature(¡æ)_1'].min()
F29 = df_4['Aux_Temperature(¡æ)_1'].mean() - df_1['Aux_Temperature(¡æ)_1'].mean()
F30 = df_4['Aux_Temperature(¡æ)_1'].max() - df_1['Aux_Temperature(¡æ)_1'].max()

Temperature = pd.DataFrame(columns=['min','mean','max'])
for i in tqdm(range(1,5)):
        Diags_Data = f'INR21700_M50T_T23_Aging_0_05C_W9_Channel_5 ({i}).xlsx'
        df = pd.read_excel(Diags_Data, sheet_name='Channel_5_1', usecols=['Aux_Temperature(¡æ)_1'])

        Temperature_min = df['Aux_Temperature(¡æ)_1'].min()
        Temperature_mean = df['Aux_Temperature(¡æ)_1'].mean()
        Temperature_max = df['Aux_Temperature(¡æ)_1'].max()
    
        temp_series = pd.Series({'min': Temperature_min, 'mean': Temperature_mean, 'max': Temperature_max})
        Temperature = Temperature.append(temp_series, ignore_index=True)

F31 = Temperature['min'].mean()
F32 = Temperature['mean'].mean()
F33 = Temperature['max'].mean()

values = [F1, F2, F3, F4, F5, F6, F7, F8, 
          F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, F30, F31, F32, F33]
columns = ['F{}'.format(i) for i in range(1, 34)]

features.loc[4, columns] = values
