# MLP Model
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import GridSearchCV

# Define the MLPRegressor model
mlp_model = MLPRegressor()

# Define the parameter grid for hyperparameter tuning
param_grid = {
    'hidden_layer_sizes': [(100,), (50, 50), (100, 50, 25)],
    'activation': ['relu', 'tanh', 'logistic'],
    'alpha': [0.0001, 0.001, 0.01],
    'max_iter': [200, 300, 500]
}

# Perform GridSearchCV to find the best hyperparameters
mlp_grid_search = GridSearchCV(estimator=mlp_model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=3)
mlp_grid_search.fit(X_train, y_train)

# Get the best MLP model
best_mlp_model = mlp_grid_search.best_estimator_

# Fit the best model on the training data
best_mlp_model.fit(X_train, y_train)

# Make predictions on the training and test sets
y_train_pred_mlp = best_mlp_model.predict(X_train)
y_test_pred_mlp = best_mlp_model.predict(X_test)

# Evaluate the model performance
train_rmse_mlp = mean_squared_error(y_train, y_train_pred_mlp, squared=False)
test_rmse_mlp = mean_squared_error(y_test, y_test_pred_mlp, squared=False)

# Display results
results_mlp = pd.DataFrame({
    'Model': ['MLP'],
    'Best Hyperparameters': [mlp_grid_search.best_params_],
    'Train RMSE': [train_rmse_mlp],
    'Test RMSE': [test_rmse_mlp]
})

# Save results to CSV
results_mlp.to_csv('mlp_results.csv', index=False)
