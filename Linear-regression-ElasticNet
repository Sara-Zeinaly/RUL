# fit linear regression with elastic net
from sklearn.linear_model import ElasticNet
X =  features_flat[0:4,:]
Y = SOH[0:4,:]
from sklearn.model_selection import train_test_split, cross_val_score
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25)

from sklearn.linear_model import ElasticNet
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
model = ElasticNet()
param_grid = {
    'alpha': [0.000001,0.00001,0.0001,0.001,0.01,0.1, 1.66, 6],
    'l1_ratio': [0.000001, 0.00001, 0.0001,0.001,0.01,0.1, 0.5, 0.99]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_absolute_error', cv=3)
grid_search.fit(X_train , y_train)
best_model = grid_search.best_estimator_
best_model.fit(X_train ,y_train)

y_train_pred = best_model.predict(X_train)
train_rmse = mean_squared_error(y_train, y_train_pred, squared=False)
best_params = grid_search.best_params_
best_score = grid_search.best_score_
y_test_pred = best_model.predict(X_test)
# Average deviated cycles
test_rmse = mean_squared_error(y_test, y_test_pred, squared=False)
test_mae = mean_absolute_error(y_test, y_test_pred)
r2 = r2_score(y_test, y_test_pred)
results = pd.DataFrame({
    'Model': ['ElasticNet'],
    'Best Alpha': [best_params['alpha']],
    'Best L1 Ratio': [best_params['l1_ratio']],
    'Train RMSE': [train_rmse],
    'Best CV Score': [best_score],
    'Test RMSE': [test_rmse],
    'Test MAE': [test_mae]
})

# Save the results to a CSV file
results.to_csv('elasticnet_results.csv', index=False)
import pandas as pd
df= pd.DataFrame(grid_search.cv_results_)
df.to_csv('summary2.csv')

dir(grid_search)
